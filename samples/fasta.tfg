#!/usr/bin/env textfrog
/* neoe make for
 * The Computer Language Benchmarks Game
 * https://salsa.debian.org/benchmarksgame-team/benchmarksgame/

Exit(0) in about 437 ms for
java -cp .  fasta

Exit(0) in about 4,295 ms for
python3 fasta.python3 2500000

Exit(0) in about 44,153 ms for
textfrog fasta.tfg
kill.tfg  fasta.tfg
*/
runnable main args {
	makeCumulative ( HomoSapiens )
	makeCumulative ( IUB )
	n = 2500000
	if ( args . size ( ) > 0 )
		n = toInt ( args [ 0 ] )
	end
	makeRepeatFasta ( "ONE" "Homo sapiens alu" ALU n * 2 )
	makeRandomFasta ( "TWO" "IUB ambiguity codes" IUB n * 3 )
	makeRandomFasta ( "THREE" "Homo sapiens frequency" HomoSapiens n * 5 )
}

IM = 139968
IA = 3877
IC = 29573
last = 42

LINE_LENGTH = 60

// pseudo-random number generator
function random ( max ) {
	G . last = ( G . last * IA + IC ) % IM
	return max * G . last / IM
}

// Weighted selection from alphabet
ALU = "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"
+ "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"
+ "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"
+ "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"
+ "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"
+ "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"
+ "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA"

IUB = [
	'a' 0.27
	'c' 0.12
	'g' 0.12
	't' 0.27
	'B' 0.02
	'D' 0.02
	'H' 0.02
	'K' 0.02
	'M' 0.02
	'N' 0.02
	'R' 0.02
	'S' 0.02
	'V' 0.02
	'W' 0.02
	'Y' 0.02 ]

HomoSapiens = [
	'a' 0.3029549426680d
	'c' 0.1979883004921d
	'g' 0.1975473066391d
	't' 0.3015094502008d
]

function makeCumulative ( a ) {
	cp = 0
	len = a . size ( ) / 2
	for len i {
		p = i * 2 + 1
		cp = cp + a [ p ]
		a [ p ] = cp
	}
}

// naive
function selectRandom ( a ) {
	len = a . size ( ) / 2
	r = random ( 1.0 )
	for len i {
		if ( r < a [ i * 2 + 1 ] )
			return a [ i * 2 ]
		end
	}
	return a [ ( len - 1 ) * 2 ]
}

BUFFER_SIZE = 1024
function makeRandomFasta ( id desc a n ) {
	bb = [ ]
	m = 0
//	log ( descStr = ">" + id + " " + desc )
	for {
		if ( n <= 0 ) break end
		if ( n < LINE_LENGTH ) m = n else m = LINE_LENGTH end
		if ( BUFFER_SIZE - bb . size ( ) < m )
//			log ( bb . join ( '' ) )
			bb . clear ( )
		end
		for m i {
			bb . add ( selectRandom ( a ) )
		}
		bb . add ( '\n' )
		n = n - LINE_LENGTH
	}
	if ( bb . size ( ) != 0 ) log ( bb . join ( '' ) ) end
}

function makeRepeatFasta ( id desc alu n ) {
	bb = [ ]
	m = 0
	k = 0
	kn = ALU . length ( )
//	log ( descStr = ">" + id + " " + desc )
	for {
		if ( n <= 0 ) break end
		if ( n < LINE_LENGTH ) m = n else m = LINE_LENGTH end
		if ( BUFFER_SIZE - bb . size ( ) < m )
//			log ( bb . join ( '' ) )
			bb . clear ( )
		end
		for m i {
			if ( k == kn ) k = 0 end
			bb . add ( ALU [ k ] )
			k = k + 1
		}
		bb . add ( '\n' )
		n = n - LINE_LENGTH
	}
	if ( bb . size ( ) != 0 ) log ( bb . join ( '' ) ) end
}


